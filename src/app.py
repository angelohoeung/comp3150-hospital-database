from flask import Flask, render_template, request
import sqlite3
from os.path import dirname

app = Flask(__name__)

# read SQL queries from file
with open(f'{dirname(__file__)}/schema.sql', 'r') as f:
    sql_queries = f.read()

# create new database and execute queries
connection = sqlite3.connect('schema.db')
cursor = connection.cursor()
cursor.executescript(sql_queries)
connection.commit()

# Define a route for the home page
@app.route('/', methods=['GET', 'POST'])
def home():
    query_dict = {
"Total billing": """-- Query 1: Each hospital location's total amount in billing 
-- Retrieves the total billing amount for each hospital via joining the Hospital and Billing tables first (through hospital_ID)
-- It calculates the sum total value of billing_amount based on each hospital (uses SUM()) 
-- Then it joins the Patient table on hospital_ID
-- It groups the result by hospital_name (which is then displays the sum calculation and/or the function SUM())

SELECT hospital.hospital_name, SUM(billing.billing_amount) as sum_billingamount
FROM Hospital hospital
INNER JOIN Billing billing ON patient.patient_ID = billing.patient_ID
INNER JOIN Patient patient ON hospital.hospital_ID = patient.hospital_ID
GROUP BY hospital.hospital_name;""",

"Trigger": """-- Query 2: Send Error message/trigger warning when Patient's date of check-in is chronological and valid after their check-out date
-- 'trigger_validchronDate' is the trigger used to validate a given patient date of hospital check-in when a tuple is newly inputted within table of "Patient"
-- If a given patient's date of check-in is after ('greater than') their check-out, then a trigger will be thus raised (as it should only be before or on the check-out date)
-- The raised trigger will give a message of error that the patient's check-in date should be before the check-out date 

CREATE TRIGGER trigger_validchronDate BEFORE INSERT ON Patient
FOR EACH ROW
WHEN NEW.patient_checkindate > NEW.patient_checkoutdate
BEGIN
    SELECT RAISE(ABORT, 'Error: The patient should check-in on a date that is identical to or before the date they checked out!');
END;""",

"Hospitals with no patients checked-in on date" :"""-- Query 3: Display the list of hospitals that have no patients checked-in on a given date, along with their locations.
-- uses a left join to include all hospitals in the result, and filters out the ones that have patients checked-in on a specific date.
-- It selects the hospital name and location, and uses the DISTINCT keyword to remove duplicates.

SELECT DISTINCT h.hospital_name, h.hospital_location
FROM Hospital h
LEFT JOIN Patient p ON h.hospital_ID = p.hospital_ID
WHERE p.patient_checkindate <> '2023-03-20' OR p.patient_checkindate IS NULL;""",

"Patients with diabetes": """-- Query 4: retrieves information about patients who have the condition "Diabetes", including their ID, name, condition, treatment, their assigned doctor's ID and name, as well as the name and location of the hospital they're staying in.
-- The query achieves this by joining the Patient, Patients_Doctors, Doctor, and Hospital tables using their foreign keys.
-- Uses '||' to concatenate

SELECT 
    p.patient_ID, 
    p.patient_firstname || ' ' || p.patient_lastname AS patient_name, 
    p.patient_condition, 
    p.patient_treatment, 
    d.doctor_ID, 
    d.doctor_firstname || ' ' || d.doctor_lastname AS doctor_name, 
    h.hospital_name, 
    h.hospital_location 
FROM 
    Patient p 
    INNER JOIN Patients_Doctors pd ON p.patient_ID = pd.patient_ID 
    INNER JOIN Doctor d ON pd.doctor_ID = d.doctor_ID 
    INNER JOIN Hospital h ON p.hospital_ID = h.hospital_ID 
WHERE 
    p.patient_condition = 'Diabetes';""",

"Revenue of given month": """-- Query 5: total revenue generated by each hospital and pharmacy in a given month, along with their location
-- uses a union of two queries to combine the revenue generated by hospitals and pharmacies in a given month
-- uses left joins to include all hospitals and pharmacies in the result, even if they have no patients
-- uses the GROUP BY clause to aggregate the billing amounts for each facility, and selects the facility name, location, and revenue

SELECT h.hospital_name AS facility_name, h.hospital_location AS facility_location, SUM(b.billing_amount) AS revenue
FROM Hospital h
LEFT JOIN Patient p ON h.hospital_ID = p.hospital_ID
LEFT JOIN Billing b ON p.patient_ID = b.patient_ID
WHERE b.billing_date BETWEEN '2023-01-01' AND '2023-01-31'
GROUP BY h.hospital_ID
UNION ALL
SELECT ph.pharmacy_name AS facility_name, ph.pharmacy_location AS facility_location, SUM(b.billing_amount) AS revenue
FROM Pharmacy ph
LEFT JOIN Patient p ON ph.pharmacy_ID = p.patient_ID
LEFT JOIN Billing b ON p.patient_ID = b.patient_ID
WHERE b.billing_date BETWEEN '2023-01-01' AND '2023-01-31'
GROUP BY ph.pharmacy_ID;""",

"Patient treated by specific doctor": """-- Query 6: patients who have been treated by a specific doctor and the nurses who have assisted in their treatment
-- several JOIN statements to connect different tables in the database
-- use the WHERE clause to filter the results based on the doctor's first and last name

SELECT p.patient_ID, p.patient_firstname, p.patient_lastname, d.doctor_firstname, d.doctor_lastname, n.nurse_firstname, n.nurse_lastname
FROM Patients_Doctors pd
JOIN Patient p ON pd.patient_ID = p.patient_ID
JOIN Doctor d ON pd.doctor_ID = d.doctor_ID
JOIN Patients_Nurses pn ON pn.patient_ID = p.patient_ID
JOIN Nurse n ON pn.nurse_ID = n.nurse_ID
WHERE d.doctor_lastname = 'Smith' AND d.doctor_firstname = 'John';""",

"Total of each patient at hospital": """-- Query 7: retrieves the total amount of money paid by each patient in a particular hospital, along with their primary doctor's name
-- start with the Patient table and join to the Billing and Payment tables to get the total amount of money paid by each patient.
-- join to the Patients_Doctors and Doctor tables to get the name of each patient's primary doctor.
-- use a GROUP BY clause to group the results by patient ID
-- use the SUM function to calculate the total payment amount for each patient

SELECT p.patient_ID, p.patient_firstname, p.patient_lastname, SUM(pm.payment_amount) AS total_payment_amount, d.doctor_firstname || ' ' || d.doctor_lastname AS primary_doctor_name
FROM Patient p
INNER JOIN Billing b ON p.patient_ID = b.patient_ID
INNER JOIN Payment pm ON b.billing_ID = pm.billing_ID
INNER JOIN Patients_Doctors pd ON p.patient_ID = pd.patient_ID AND pd.is_primary = 1
INNER JOIN Doctor d ON pd.doctor_ID = d.doctor_ID
WHERE p.hospital_ID = 001
GROUP BY p.patient_ID;"""
}
    if request.method == 'POST':
        query_text = request.form['query_text']
        try:
            connection = sqlite3.connect('schema.db')
            cursor = connection.cursor()
            cursor.execute(query_text)
            results = cursor.fetchall()
            column_names = [description[0] for description in cursor.description]
            connection.close()
            return render_template('index.html', results=results, column_names=column_names, query_text=query_text, error=None, query_dict=query_dict)
        except Exception as e:
            error = str(e)
            return render_template('index.html', results=None, column_names=None, query_text=query_text, error=error, query_dict=query_dict)
    else:
        for key, value in query_dict.items():
            query_dict[key] = value.replace("'", '"')
        return render_template('index.html', results=None, column_names=None, query_text=None, error=None, query_dict=query_dict)


if __name__ == '__main__':
    app.run(debug=True)